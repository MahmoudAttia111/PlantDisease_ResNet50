# -*- coding: utf-8 -*-
"""Plant Disease Classification (Pretrained)_intern_4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/174boHK0-JwPpL4mgadK05IzSklcPioNR

# download data
"""

# IMPORTANT: RUN THIS CELL IN ORDER TO IMPORT YOUR KAGGLE DATA SOURCES,
# THEN FEEL FREE TO DELETE THIS CELL.
# NOTE: THIS NOTEBOOK ENVIRONMENT DIFFERS FROM KAGGLE'S PYTHON
# ENVIRONMENT SO THERE MAY BE MISSING LIBRARIES USED BY YOUR
# NOTEBOOK.
import kagglehub
abdallahalidev_plantvillage_dataset_path = kagglehub.dataset_download('abdallahalidev/plantvillage-dataset')

print('Data source import complete.')

"""## import library"""

!pip install tensorflow

import os
import matplotlib.pyplot as plt
import tensorflow as tf
from tensorflow.keras.applications import ResNet50
from tensorflow.keras.models import Model
import tensorflow as tf
from tensorflow.keras.layers import Dense,GlobalAvgPool2D,Dropout
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.callbacks import ModelCheckpoint

data_dir = os.path.join(abdallahalidev_plantvillage_dataset_path, "plantvillage dataset",'color')

# # This Python 3 environment comes with many helpful analytics libraries installed
# # It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python
# # For example, here's several helpful packages to load

# import numpy as np # linear algebra
# import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

# # Input data files are available in the read-only "../input/" directory
# # For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory

# import os
# for dirname, _, filenames in os.walk('/kaggle/input'):
#     for filename in filenames:
#         print(os.path.join(dirname, filename))

# # You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using "Save & Run All"
# # You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session

img_size =(224,224)
batch_size = 32
datagen = ImageDataGenerator(
    rescale =1./255,
    validation_split = 0.2
)
train_data = datagen.flow_from_directory(
    data_dir,target_size=img_size,
    batch_size = batch_size,class_mode = "categorical",
    subset = 'training'
)
val_data = datagen.flow_from_directory(
    data_dir,target_size=img_size,
    batch_size = batch_size,class_mode = "categorical",
    subset = 'validation'
)

print("number of classes" , train_data.num_classes)
print("Name Of Classes", train_data.class_indices)

x,y = next(train_data)
plt.imshow(x[0])
plt.title(f"label : y[0]")
plt.axis("off")
plt.show()

base_model = ResNet50(weights="imagenet", include_top=False, input_shape=(224,224,3))

for layer in base_model.layers:
    layer.trainable = False

x = base_model.output
x = GlobalAvgPool2D()(x)
x = Dense(256, activation="relu")(x)
x = Dropout(0.5)(x)
predictions = Dense(train_data.num_classes, activation="softmax")(x)

model = Model(inputs=base_model.input, outputs=predictions)

model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=1e-4),
              loss="categorical_crossentropy",
              metrics=["accuracy"])

history = model.fit(train_data, validation_data=val_data, epochs=5)

for layer in base_model.layers[-75:]:
  layer.trainable = True
  model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=1e-5),
              loss="categorical_crossentropy",
              metrics=["accuracy"])
history_finetune  = model.fit(train_data, validation_data=val_data, epochs=10)

model.save("best_model_resnet50.keras")

loss,acc = model.evaluate(val_data)
print(f"val_loss : {loss} , val_acc : {acc}")

checkpoint = ModelCheckpoint(
    "best_model_resnet50.keras",
    monitor="val_accuracy",
    save_best_only=True,
    mode="max",
    verbose=1
)

# Fine-tuning
for layer in base_model.layers[-75:]:
    layer.trainable = True

model.compile(
    optimizer=tf.keras.optimizers.Adam(learning_rate=1e-5),
    loss="categorical_crossentropy",
    metrics=["accuracy"]
)

history_finetune = model.fit(
    train_data,
    validation_data=val_data,
    epochs=20,
    callbacks=[checkpoint]
)

loss,acc = model.evaluate(val_data)
print(f"val_loss : {loss} , val_acc : {acc}")

model.save("best_model_resnet50.keras")

import matplotlib.pyplot as plt

plt.plot(history.history['accuracy'], label='Train Accuracy')
plt.plot(history.history['val_accuracy'], label='Val Accuracy')
plt.legend()
plt.title("Accuracy")
plt.show()

plt.plot(history.history['loss'], label='Train Loss')
plt.plot(history.history['val_loss'], label='Val Loss')
plt.legend()
plt.title("Loss")
plt.show()